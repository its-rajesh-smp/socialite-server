datasource db {
    url      = env("DATABASE_URL")
    provider = "postgresql"
}

generator client {
    provider = "prisma-client-js"
}


// Enums
enum PostReaction {
    LIKE
    HAHA
    DISLIKE
}

enum Visibility {
    PRIVATE
    PUBLIC
    FRIENDS
}

enum Status {
    LIVE
    ACHIEVED
}

enum TaskType {
    RESOURCE
    CODING
}


// Models
model User {
    id        String   @id @default(cuid())
    email     String   @unique
    password  String
    name      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    posts Post[]
    reactions Reaction[]
    comments Comment[]
    userStatuses UserStatus[]
    practiceSets PracticeSet[]
    practiceTasks PracticeTask[]
    userSubmitTasks UserSubmitTask[]
    userPracticeSets UserPracticeSet[]
    userTaskMetadatas UserTaskMetadata[]
}

model UserStatus {
    id String @id @default(cuid())
    userId    String

    pictureUrl String?
    text String?
    backgroundImageUrl String? 

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user      User @relation(fields: [userId], references: [id])
}

model Post {
    id String @id @default(cuid())
    userId    String

    visibility Visibility
    text      Json
    totalLikeCount Int @default(0)
    totalCommentCount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    reactions Reaction[]
    comments Comment[]
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reaction {
    id String @id @default(cuid())
    userId    String
    postId String

    reactionType PostReaction

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId] , references: [id], onDelete: Cascade)
}

model Comment {
    id String @id @default(cuid())
    userId    String

    pictureUrl String?
    text String?
    postId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId] , references: [id], onDelete: Cascade)
}

model PracticeSet {
    id String @id @default(cuid())
    userId String

    title String
    description Json
    visibility Visibility
    status Status @default(LIVE)
    enrollmentCount Int @default(0)
    totalTaskCount Int @default(0)
    config Json?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    practiceTasks PracticeTask[]
    userSubmitTasks UserSubmitTask[]
    userPracticeSets UserPracticeSet[]
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPracticeSet {
    id String @id @default(cuid())
    practiceSetId String
    userId String

    status Status @default(LIVE)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    practiceSet PracticeSet @relation(fields: [practiceSetId], references: [id], onDelete: Cascade)
    userSubmitTasks UserSubmitTask[]
}

model PracticeTask {
    index Int @default(0)
    id String @id @default(cuid())
    userId String
    practiceSetId String

    title String
    description Json
    visibility Visibility
    completionCount Int @default(0)
    status Status  @default(LIVE)
    taskType TaskType

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    practiceSet PracticeSet @relation(fields: [practiceSetId], references: [id], onDelete: Cascade)
    userSubmitTasks UserSubmitTask[]
    userTaskMetadatas UserTaskMetadata[]
}

model UserTaskMetadata {
    id String @id @default(cuid())
    userId String
    practiceTaskId String

    note Json
    isBookmarked Boolean @default(false)
    isIgnored Boolean @default(false)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    practiceTask PracticeTask @relation(fields: [practiceTaskId], references: [id], onDelete: Cascade)
}

model UserSubmitTask {
    id String @id @default(cuid())
    userId String
    practiceSetId String 
    practiceTaskId String
    userPracticeSetId String
    userResponse Json
    
    createdAt DateTime @default(now())
    submittedAt DateTime
    updatedAt DateTime @updatedAt
    
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    practiceSet PracticeSet @relation(fields: [practiceSetId], references: [id], onDelete: Cascade)
    practiceTask PracticeTask @relation(fields: [practiceTaskId], references: [id], onDelete: Cascade)
    userPracticeSet UserPracticeSet @relation(fields: [userPracticeSetId], references: [id], onDelete: Cascade)
}
